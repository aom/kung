#!/usr/bin/env sh
set -e

OnExit () {
  backgrounded_job_pids=$(jobs -p)
  backgrounded_job_pids=$(echo $backgrounded_job_pids) #flatten
  if [ "$backgrounded_job_pids" != "" ]; then
    echo ""
    Info "killing backgrounded jobs: $backgrounded_job_pids"
    for backgrounded_job_pid in $backgrounded_jobs; do
      ps aux | grep $backgrounded_job_pid
      kill $backgrounded_job_pid
    done
  fi
}

trap 'OnExit' EXIT

DividerPrefix() {
  printf "👑  $@: "
}
DividerSuffix () {
  echo "$@
"
}

Started () {
  echo "🚀  $@ ($(date))"
}

Completed () {
  echo "🏁  $@ ($(date))"
}

Info () {
  echo "ℹ️  $@ ($(date))"
}

Error () {
  echo "☠️  $@"
  exit 1
}
Usage () {
  echo "👑"

  case $1 in
    "kontena")
      echo "
kontena
  install
  upgrade
  remove
  show

  deploy
  events
  logs

  nodes
  ps
  stats
  ls

  enter
  exec

  start
  stop
  restart
"
    ;;
  esac
  exit 1
}

project=$(basename $(pwd))

if [ "$1" = "" ]; then
  Usage
fi

command=$1; shift
case "$command" in
  "kontena"|"k")
    DividerPrefix "kontena"
    subcommand=$1; shift
    DividerSuffix "$subcommand $@"

    stack_name=$(cat kontena.yml | grep "^stack:" | rev | cut -d' ' -f1 | rev)

    case "$subcommand" in
      "ls")
        kontena service ls
      ;;
      "install")
        kontena stack install --no-deploy
        $0 kontena deploy $@
      ;;
      "upgrade")
        kontena stack upgrade --no-deploy $stack_name
        echo ""
        $0 kontena deploy $@
      ;;
      "events")
        kontena stack events -t $stack_name
      ;;
      "deploy")
        $0 build $@
        echo ""
        $0 push $@

        if [ "$1" = "" ]; then
          kontena stack deploy $stack_name >/dev/null &
          deploy_pid=$!

          echo ""; Started "stack deploy started"
        else
          service_deploy_pids=""
          for service in $@; do
            kontena service deploy --force $stack_name/$service >/dev/null &
            service_deploy_pids="$service_deploy_pids $!"
          done
        fi

        kontena stack events -t $stack_name &
        stack_events_pid=$!

        wait $deploy_pid $service_deploy_pids
        echo ""; Completed "deploy completed"
        kill $stack_events_pid

        echo ""
        $0 kontena logs $@
      ;;
      "logs")
        [ "$KUNG_FRONTEND" != "noninteractive" ] && log_opts="-t"
        if [ "$1" = "" ]; then
          kontena stack logs $log_opts $stack_name
        else
          grep_filter="$stack_name.$1"
          shift
          for service in $@; do
            grep_filter="$grep_filter\|$stack_name.$service"
          done
          set +e
            kontena stack logs $log_opts $stack_name | grep "$grep_filter"
          set -e
        fi
      ;;
      "remove"|"rm")
        kontena stack remove --force $stack_name
      ;;
      "restart")
        KUNG_FRONTEND=noninteractive $0 kontena stop "$@"
        echo ""
        $0 kontena start $@
      ;;
      "stop")
        if [ "$1" = "" ]; then
          kontena stack stop $stack_name
        else
          for service in $@; do
            kontena service stop $stack_name/$service
          done
        fi

        $0 kontena logs $@
      ;;
      "start")
        if [ "$1" = "" ]; then
          kontena stack start $stack_name
          $0 kontena logs $@
        else
          for service in $@; do
            kontena service start $stack_name/$service
          done
        fi

        $0 kontena logs $@
      ;;
      "show")
        if [ "$1" = "" ]; then
          kontena stack show $stack_name
        else
          kontena service show $stack_name/$1
        fi
      ;;
      "exec")
        service=$1
        shift
        kontena service exec -it $stack_name/$service $@
      ;;
      "enter")
        kontena service exec -it $stack_name/$1 bash || kontena service exec -it $stack_name/$1 sh
      ;;
      "stats")
        if [ "$1" = "" ]; then
          echo "INSTANCE                       CPU %           MEM USAGE/LIMIT      MEM %           NET I/O"
          services=$(kontena service ls --stack $stack_name -q)
          for service in $services; do
            kontena service stats $service | tail -n +2
          done
        else
          kontena service stats $stack_name/$1
        fi
      ;;
      "ps")
        kontena service ls --stack $stack_name
      ;;
      "nodes")
        nodes=$(kontena node ls -q)
        for node in $nodes; do
          echo $node
          node_show=$(kontena node show $node)
          printf "$node_show" | grep "public ip:"
          printf "$node_show" | grep -A5 stats:
        done
      ;;
      *)
        Usage "kontena"
      ;;
    esac
  ;;

  "compose"|"c")
    DividerPrefix "compose"
    subcommand=$1; shift
    DividerSuffix "$subcommand"

    case "$subcommand" in
      "build")
        if [ "$1" = "" ]; then
          services=$(docker-compose config --services)
        else
          services=$@
        fi

        build_pid_list=""
        for service in $services; do
          docker-compose build $service &
          build_pid_list="$build_pid_list $!"
        done

        for build_pid in $build_pid_list; do
          if ! wait $build_pid; then
            kill $build_pid_list 2>/dev/null || :
            Error "docker build failed"
          fi
        done
      ;;
      "exec")
        docker-compose exec $1 $2
      ;;
      "stop")
        docker-compose stop -t 0 $@
      ;;
      "rm")
        $0 compose stop $@
        docker-compose rm --force $@
      ;;
      "up")
        docker-compose up --remove-orphans -d $@
      ;;
      "up:build")
        docker-compose up --build --force-recreate -t 0 --remove-orphans -d $@
      ;;
      "up:recreate")
        docker-compose up --no-deps --force-recreate -t 0 --remove-orphans -d $@
      ;;
      "logs:last")
        docker-compose logs --tail=20 $@
      ;;
      "logs:tail")
        if [ "$KUNG_FRONTEND" = "noninteractive" ]; then
          echo "not tailing in noninteractive"
        else
          docker-compose logs --tail=0 -f $@
        fi
      ;;
      "run")
        service=$1
        shift
        cmd=$@
        echo $cmd
        docker-compose run --entrypoint "$cmd" $service
      ;;
      "restart")
        docker-compose restart -t 0 $@
      ;;
      *)
        Error "Unknown: $subcommand"
      ;;
    esac
  ;;

  "logs")
    $0 compose logs:last $@
    $0 compose logs:tail $@
  ;;
  "build"|"b")
    $0 compose build $@
  ;;
  "rebuild"|"rb")
    $0 compose up:build $@
    $0 compose logs:tail $@
  ;;
  "recreate"|"rc")
    $0 compose up:recreate $@
    $0 compose logs:tail $@
  ;;
  "restart"|"r")
    $0 compose restart $@
    $0 compose logs:tail $@
  ;;
  "stop")
    $0 compose stop $@
  ;;
  "stop:test")
    docker-compose stop -t 9999 $@
  ;;
  "freeze")
    service=$1
    if [ "$service" = "" ]; then
      Error "Requires service"
    fi

    echo "version: '3.1'
services:
  $1:
    entrypoint: '/bin/sh'
    command: ['-c', 'echo sleeping forever..; while true; do sleep 9999999; done']
" > docker-compose.override.yml
    $0 compose up:recreate $1
    rm docker-compose.override.yml
  ;;
  "shell")
    $0 compose run $1 /bin/bash || $0 compose run $1 /bin/sh
  ;;
  "enter")
    service=$1
    shift

    $0 compose exec $service /bin/bash || $0 compose exec $service /bin/sh
  ;;
  "attach")
    docker attach --sig-proxy=false "$project"_"$1"_1
  ;;

  "ps")
    docker-compose ps | grep Up
  ;;

  "push")
    if [ "$1" = "" ]; then
      services=$(docker-compose config --services)
    else
      services=$@
    fi

    push_pid_list=""
    for service in $services; do
      docker-compose push $service &
      push_pid_list="$push_pid_list $!"
    done

    for push_pid in $push_pid_list; do
      if ! wait $push_pid; then
        kill $push_pid_list 2>/dev/null || :
        Error "docker push failed"
      fi
    done
  ;;

  "tag")
    docker tag "$project"_"$1" "$2"
  ;;


  "moby:shell")
    docker run --rm -it --privileged --pid=host walkerlee/nsenter -t 1 -m -u -i -n sh
  ;;
  "moby:stop")
    docker ps -q | xargs docker stop -t 0
  ;;
  "moby:kill")
    docker ps -q | xargs docker kill
  ;;
  "docker:stats")
    docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}"
  ;;

  "kung:install")
    dir=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )
    target=/usr/local/bin/kung

    if [ ! -e "$target" ]; then
      ln -s $dir/kung $target
      echo "Created symlink in $target"
    else
      echo "Already exists in $target"
      exit 1
    fi
  ;;

  "kung:edit")
    dir=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )/kung
    kung_file=$(readlink $dir)
    echo "Opening $kung_file ..."
    if [ -n "$EDITOR" ]; then
      $EDITOR $kung_file
    else
      atom $kung_file
    fi
  ;;
  *)
    Error "Unknown: $command"
  ;;
esac
