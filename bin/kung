#!/usr/bin/env sh
set -e

DividerPrefix() {
  printf "  👑  $1: "
}
DividerSuffix () {
  echo "$1
"
}
Error () {
  echo "  ☠️  $1"
  exit 1
}
Usage () {
  echo "👑"
  exit 1
}

project=$(basename $(pwd))

if [ "$1" = "" ]; then
  Usage
fi

command=$1; shift
case "$command" in
  "compose"|"c")
    DividerPrefix "compose"
    subcommand=$1; shift
    DividerSuffix "$subcommand"

    case "$subcommand" in
      "build")
        docker-compose build $@
      ;;
      "exec")
        docker-compose exec $1 $2
      ;;
      "stop")
        docker-compose stop -t 0 $@
      ;;
      "rm")
        $0 compose stop $@
        docker-compose rm --force $@
      ;;
      "up")
        docker-compose up --remove-orphans -d $@
      ;;
      "up:build")
        docker-compose up --build --force-recreate -t 0 --remove-orphans -d $@
      ;;
      "up:recreate")
        docker-compose up --no-deps --force-recreate -t 0 --remove-orphans -d $@
      ;;
      "logs:last")
        docker-compose logs --tail=20 $@
      ;;
      "logs:tail")
        docker-compose logs -f $@
      ;;
      "run")
        service=$1
        shift
        cmd=$@
        echo $cmd
        docker-compose run --entrypoint "$cmd" $service
      ;;
      "restart")
        docker-compose restart -t 0 $@
      ;;
      *)
        Error "Unknown: $subcommand"
      ;;
    esac
  ;;

  "logs")
    $0 compose logs:last $@
    $0 compose logs:tail $@
  ;;
  "build")
    $0 compose build $@
  ;;
  "rebuild"|"rb")
    $0 compose up:build $@
    $0 compose logs:tail $@
  ;;
  "recreate"|"rc")
    $0 compose up:recreate $@
    $0 compose logs:tail $@
  ;;
  "restart"|"r")
    $0 compose restart $@
    $0 compose logs:tail $@
  ;;
  "stop")
    $0 compose stop $@
  ;;
  "stop:test")
    docker-compose stop -t 9999
  ;;
  "freeze")
    service=$1
    if [ "$service" = "" ]; then
      Error "Requires service"
    fi

    echo "version: '3.1'
services:
  $1:
    entrypoint: '/bin/sh'
    command: ['-c', 'echo sleeping forever..; while true; do sleep 9999999; done']
" > docker-compose.override.yml
    $0 compose up:recreate $1
    rm docker-compose.override.yml
  ;;
  "shell")
    $0 compose run $1 /bin/bash || $0 compose run $1 /bin/sh
  ;;
  "enter")
    $0 compose exec $1 /bin/bash || $0 compose exec $1 /bin/sh
  ;;
  "attach")
    docker attach --sig-proxy=false "$project"_"$1"_1
  ;;

  "ps")
    docker-compose ps | grep Up
  ;;

  "push")
    docker-compose push $@
  ;;

  "moby:shell")
    docker run --rm -it --privileged --pid=host walkerlee/nsenter -t 1 -m -u -i -n sh
  ;;
  "moby:stop")
    docker ps -q | xargs docker stop -t 0
  ;;
  "moby:kill")
    docker ps -q | xargs docker kill
  ;;
  "docker:stats")
    docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}"
  ;;

  "kung:install")
    dir=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )
    target=/usr/local/bin/kung

    if [ ! -e "$target" ]; then
      ln -s $dir/kung $target
      echo "Created symlink in $target"
    else
      echo "Already exists in $target"
      exit 1
    fi
  ;;
  "kung:edit")
    dir=$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )/kung
    kung_file=$(readlink $dir)
    echo "Opening $kung_file ..."
    if [ -n "$EDITOR" ]; then
      $EDITOR $kung_file
    else
      atom $kung_file
    fi
  ;;
  *)
    Error "Unknown: $command"
  ;;
esac
